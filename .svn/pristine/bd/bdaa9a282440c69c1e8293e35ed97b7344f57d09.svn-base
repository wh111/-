<!----------------------------------
****--@name     tAppraisalContent
****--@role     ${*}
****--@date     2018/5/7
****--@author   zzh
----------------------------------->
<template>
  <div class="tAppraisalContent-root">
    <header-title>{{$route.query.title}}</header-title>
    <div class="stance"></div>
    <div class="tAppraisalContent">
      <div style="text-align: right"><x-button @click.native="join(1)" mini>易错题</x-button><x-button @click.native="join(2)" mini>难题</x-button> </div>
    <div class="question_header">
      <p class="p"> {{viewData.studentName}}<span style="float: right">{{viewData.totalScore}}分</span></p>
      <h3 style="font-size: 0.12rem;">第{{seq}}题 <span style="float: right;font-size: 0.12rem">还有<span style="color: #fd7416;font-size: 0.16rem;padding: 0 0.02rem ">{{(data.length-seq)}}</span>题 </span></h3>
    </div>
    <scroller lock-y :scrollbar-x=false @on-scroll="getNext" v-if="questionData">
      <div>
        <question-show v-if="$route.query.showType!='toCorrect'" :index="seq" :show-data="questionData" :showInput=false :showAnswer=true>
          <template v-if="questionData.childQuestionsList">
            <template v-for="(itemChild,index) in questionData.childQuestionsList" :slot="'answerRight'+itemChild.id">
              <template v-if="!['Answer','Input'].includes(itemChild.basicType)">
                <span style="margin-right: 0.1rem">难度：{{itemChild.diffLevel}} </span>
                {{itemChild.studentScore}} / {{itemChild.score}}分
              </template>
              <template v-else>
                <div :key="itemChild.id">
                  <span style="margin-right: 0.1rem">难度：{{itemChild.diffLevel}} </span>
                  {{itemChild.studentScore}}
                  <span style="color:#fd7416;"> / {{itemChild.score}}</span>
                </div>
              </template>
            </template>

          </template>
          <template v-else slot="answerRight">
            <template v-if="!['Answer','Input'].includes(questionData.basicType)">
              <span style="margin-right: 0.1rem">难度：{{questionData.diffLevel}} </span>
              {{questionData.studentScore}} / {{questionData.score}}分
            </template>
            <template v-else>
              <span style="margin-right: 0.1rem">难度：{{questionData.diffLevel}} </span>
              {{questionData.studentScore}}
              <span style="color:#fd7416;">/  {{questionData.score}}</span>
            </template>
          </template>
        </question-show>
        <div v-else>
        <question-show
                :showData="questionData"
                :showScore="true"
                :show-answer="true"
                answerDo="7"
                :index="seq"
        >
          <template v-if="questionData.childQuestionsList">
            <template v-for="(itemChild,index) in questionData.childQuestionsList" :slot="'answerRight'+itemChild.id">
              <template v-if="!['Answer','Input'].includes(itemChild.basicType)">
                <span style="margin-right: 0.1rem">难度：{{itemChild.diffLevel}} </span>
                {{itemChild.studentScore}} / {{itemChild.score}}分
              </template>
              <template v-else>
                <div :key="itemChild.id">
                  <span style="margin-right: 0.1rem">难度：{{itemChild.diffLevel}} </span>
                  <input style="width: 22%" v-model="itemChild.studentScore" slot="todoBox"
                            type="number"/>
                  <span style="color:#fd7416;"> / {{itemChild.score}}</span>
                  <x-button mini @click.native="correct(itemChild,seq-1,'child',index)">打分</x-button>
                </div>
              </template>
            </template>

          </template>
          <template v-else slot="answerRight">
            <template v-if="!['Answer','Input'].includes(questionData.basicType)">
              <span style="margin-right: 0.1rem">难度：{{questionData.diffLevel}} </span>
              {{questionData.studentScore}} / {{questionData.score}}分
            </template>
            <template v-else>
              <span style="margin-right: 0.1rem">难度：{{questionData.diffLevel}} </span>
              <input style="width: 22%" v-model="questionData.studentScore" slot="todoBox" type="number"/>
              <span style="color:#fd7416;">/  {{questionData.score}}</span>
              <x-button mini @click.native="correct(questionData,seq-1,'noChild')">打分</x-button>
            </template>
          </template>

        </question-show>
          <div style="text-align: center">
            <x-button style="margin-top: 0.1rem" @click.native="allComplete">批改完成 </x-button>
          </div>
        </div>
      </div>
    </scroller>
      <alert v-model="show">{{message}}</alert>
      <confirm v-model="confirmShow"
               @on-confirm="onConfirm">
        {{message}}

      </confirm>
    </div>
  </div>
</template>
<script>
/* 当前组件必要引入 */
import headerTitle from '../header'
// 当前组件引入全局的util
// let Util = null
  /*当前组件必要引入*/
  let Util = null
  import api from './api'
  import questionShow from '../../../components/questionShow/show.vue'

  export default {
    data () {
      return {
        confirmShow:false,
        show:false,
        message:'',
        questionList:[],
        questionData:{id:''},
        seq:this.$route.query.seq,
        timer:null,
        temp:true,
        data:[],
        postion:0,
        viewData:{},
      }
    },
    methods: {
      onConfirm(){
        this.$router.push({name:'tNone',query:this.$route.query})
      },
      allComplete () {//全部批改
        let temp = true
        console.log(this.viewData.questionsList)
        this.viewData.questionsList.map((item) => {
          console.log(item.groups)
          if(item.childQuestionsList){
            item.childQuestionsList.map((childItem)=>{
              if (!childItem.isCorrecting  && ['Input','Answer'].includes(childItem.basicType)){
                this.show=true;
                this.message='还有未批改的题，请批改完成点击提交'
                temp = false
                return false
              }
            })
          }else {
            if (!item.isCorrecting && ['Input','Answer'].includes(item.basicType)){
              this.show=true;
              this.message='还有未批改的题，请批改完成点击提交'
              temp = false
              return false
            }
          }
        })
        if (!temp) {
          return false
        }
        let opt={};
        if(this.$route.query.type=='homework'){
          opt={
            workId: this.$route.query.id,
            studentId: this.$route.query.studentId,
            groupsId: this.$route.query.groupsId
          }
        }else{
          opt={
            papersId: this.$route.query.id,
            studentId: this.$route.query.studentId,
          }
        }
        this.ajax({
          ajaxSuccess: () => {
            this.confirmShow=true;

          },

            url: api.finishedTest.path,
            method: api.finishedTest.method,
            data:opt,

        })
      },
      correct (val, index,type,childrenIndex) {//

        let questionData={
          workId: this.$route.query.id,
          studentId: this.$route.query.studentId,
          groupsId: this.$route.query.groupsId,
          questionsId:val.id,
          score:val.studentScore
        }
        if(this.$route.query.type!='homework'){
          questionData= {
            paperId: this.$route.query.id,
            studentId: this.$route.query.studentId
          }
        }
        if (val.studentScore > val.score  || val.studentScore < 0||val.studentScore==='') {
          this.show=true;
          this.message='请输入正确分值'
          return false
        }
        let opt = Object.assign({},questionData)
        this.ajax({
          ajaxSuccess: (res) => {
            this.show=true;
            this.message='批改成功'
            if(childrenIndex!=undefined){
              this.viewData.totalScore += (Number(val.studentScore) - Number(this.viewData.questionsList[index].childQuestionsList[childrenIndex].middle));
              this.viewData.questionsList[index].childQuestionsList[childrenIndex].middle=val.studentScore;
              this.viewData.questionsList[index].childQuestionsList[childrenIndex].isCorrecting = true

            }else {
              this.viewData.totalScore += (Number(val.studentScore) - Number(this.viewData.questionsList[index].middle))
              this.viewData.questionsList[index].middle = val.studentScore
              this.viewData.questionsList[index].isCorrecting = true
            }
          },

            url: api.correctEvaluation.path,
            method: api.correctEvaluation.method,
            data: opt,

        })
      },
      getAnswerQuestion(seq){
        this.seq=seq;
        this.questionData=this.data[this.seq-1];
      },
      getNext (val) {
        if (val.left > 0) {
          this.poition = 1
        } else if (val.left < 0) {
          this.poition = -1
        } else {
          clearTimeout(this.timer)
          this.timer = setTimeout(() => {
            let value = this.seq+ this.poition
            if (value < 1 || value > this.data.length) {
              return
            }
            console.log(this.seq)
            this.seq=value;
            this.questionData=this.data[this.seq-1];

          }, 200)
        }
      },
      //初始化请求列表数据
      init () {
        Util = this.$util;
        this.getAllAnswerQuestion()//获取试题详情

      },
//      getAnswerResult () {
//        let opt = {
//          ajaxSuccess: (data, res) => {
//            this.setData(data);//获取题号
//          },
//          url: '/autoAssessment/getAnswerResult',
//          params: {
//            id: this.$route.query.id
//
//          }
//        }
//        this.ajax(opt)
//      },
//      setData(data){
//        console.log(data)
////        data.knowledgeList.map((item)=>{
////          this.questionList=this.questionList.concat(item.stuAnswerInfo)
////          console.log(item.stuAnswerInfo)
////        })
//        this.questionList.map((item,index)=>{
////          item.questionsTypeName=
//        })
//      },
      getAllAnswerQuestion(){
        if(this.$route.query.type=='homework'){
          var params={
            studentId:this.$route.query.studentId,
            workId:this.$route.query.id
          }
        }


        let opt = {
          ajaxSuccess: (data, res) =>{
            this.viewData = res.data;
            this.viewData.questionsList.map((item,index) => {
              item.middle = item.studentScore;
              if(item.childQuestionsList){
                item.childQuestionsList.map((itemChildren)=>{
                  itemChildren.middle= itemChildren.studentScore;
                })
              }
              // this.viewData.questionsList.map((item) => {item.middle = (item.studentScore || 0)})
            })
            this.data=data.questionsList;
            this.questionData=this.data[this.seq-1];
          },
          url:api.getWorkInfo.path,
          params: params,
        }
        this.ajax(opt)
      },
      join(val){
        let opt = {
          ajaxSuccess: (data, res) =>{
             this.message=(val==1?'添加易错题成功':'添加难题成功')
             this.show=true;
          },
          url:api.joinQuestion.path,
          method:api.joinQuestion.method,
          data: {
            questionsId:this.questionData.id,
            questionsLibraryType:val,
            source:this.$route.query.type=='homework'?5:4,
            busId:this.$route.query.id,
          },
        }
        this.ajax(opt)
      }
    },
    created () {
      this.init();
    },
    mounted () {
    },
    components: {questionShow,headerTitle}
  }
</script>
<style lang="scss">
  .tAppraisalContent{
    background: #DEEAE1;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    padding: 0.15rem;
    min-height: 6.2rem
  }
</style>
